https://www.youtube.com/watch?v=THxIyHz191A

TLS Overview:

TLS: ---> ADD
Authentication ✅
Data Protection ✅
Data Integrity ✅
HTTP + TLS = HTTPS ✅
Key Types:

Asymmetric Key:
Two keys: Public Key (encrypts data), Private Key (decrypts data) ✅
Slow but it is able to perform authentication ✅

Symmetric Key:
Performs both encryption and decryption ✅
Unable to perform authentication but fast ✅

Certificate Authority (CA):
CA signs certificates with its own private key (Digitally Signed) ✅
Once issued, installed on server ✅

Digital Signing:
Sign with your private key, verify with your public key ✅
Server-side CSR:

Server generates a Certificate Signing Request (CSR) ✅
CA signs the CSR with its private key (Digitally Signed) ✅

CSR
You do sign the CSR with your private key.
The CSR does contain your public key.
You use your private key to create a digital signature within the CSR, which proves to the Certificate Authority (CA) that you control the corresponding private key.


Here’s the process:

Generate Key Pair: You generate a private key and a corresponding public key.
Create CSR: You create a CSR that includes your public key and some information about your identity (like domain name, organization, etc.). The CSR is digitally signed with your private key, proving you own the private key that corresponds to the public key.
Submit CSR: You send the CSR to the CA.
CA Signs Certificate: The CA verifies your information and uses its private key to sign the certificate, which includes your public key.
So, while the CSR is associated with your private key because it's digitally signed, the signing step for the certificate itself is done by the CA using their private key, not by you.


Session:
A conversation between two parties for a limited or unlimited time ✅
Client-Server Communication:

TLS Session:
Handshake Phase: Purpose is authentication ✅
Encryption Phase ✅


Client sends "hello" to server ✅
Server sends its public key and certificate ✅
Client verifies the certificate with CA; once verified, uses server's public key to encrypt a message ✅
Server decrypts the message with its private key ✅

Secret String:
Both client and server use the secret string and other information to generate a Master Key ✅

Session Key:
Client generates a Session Key using the Master Key ✅
Server generates a Session Key using the Master Key ✅
Session Key is a symmetric key used for encryption and decryption ✅
Encryption Algorithms: AES-256-GCM and CHACHA20 ✅

Session Security:
Session becomes secure and fast ✅

MAC (Message Authentication Code):
Each encrypted message includes a MAC key ✅
If MACs match between client and server, data integrity is confirmed (no tampering) ✅
